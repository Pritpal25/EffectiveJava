ITEM 12 : ALWAYS override toString method in instantiable classes

-- Default toString implementation is className@hashCode. This doesn't help with debugging. So always override the
toString method in any instantiable class.
-- ToString should return all the interesting information in the object when practical, otherwise contain the main information.
-- Decide whether you want to provide the exact format or not.
    -- Providing a string representation makes it easy to use as input/output from a human readable data objects, such as
    CSV files.
        -- If you do, provide a static factory method or constructor that can help transform the string to object
        and vice versa.
    -- Disadvantage : they get tied to the format and can be using it to extract the object information if the public methods
        arent available for class members. This makes the string representation set in stone and not being able to change
        going forward.
    -- Whether you specify the exact format or not, provide programmatic access to the value contained in the string
        representation, otherwise the clients will try to parse the string themselves.
-- DONT provide toString for enum (already provided) or for static utility classes...no use in those classes.
-- Always provide it for abstract classes whose subclasses share common string representation. example is collections inherit the toString
from the parent abstract collection classes.
-- Google AutoValue generated toString but in some cases it may make sense to implement on your own since toString has a
semantic meaning behind it.