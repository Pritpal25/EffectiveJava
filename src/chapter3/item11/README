ITEM 11

-- Always override hashcode when overriding equals method.

General Contract for HashCode method.
-- HashCode invoked during the run of an application should return consistent value, provided no information in the
equals attributes changes (since all of those attributes are used here as well).
-- If 2 objects are equal, they must return same hashCode.
-- If 2 objects are unequal, they may/may not return the same hashCode.

@Override public int hashCode() { return 42;}
Legal hash code but worst - degrades the performance. Converts hashMap into a linked list, effectively changing time
compexity from linear to quadratic.

-- Must exclude any fields that arent used in the computation of the equals method.
-- May exclude derived fields.

-- Object has a 'hash' method that provides hash but is slow in performance due to autoboxing and the need for array creation
    Objects.hash(x, y,)

-- Use lazy initialization of hashcode for immutable classes, or classes that are expensive to compute for hashcode
.. see PhoneNumber class example.

-- Don't remove significant fields from computation
-- Dont provide detailed explanation of hash calculation, dont want clients to rely on the values
    -- So that its possible to change it in future.

-- Check page 51 for a recipe of good hash code.