Use dependency injection when the behavior of your class depends on the underlying resource.
Do not hardcode that dependency.

Its important to understand the different types of dependencies - stateless resources and stateful resources.

There can be some static stateless resources that can be hardcoded into a class, since they themselves never change.

However, if there is an instance that can change, and a change in that instance resource can result in change in the
behavior of your class, then that instance resource must be dependency injected.

See this : https://stackoverflow.com/questions/56457262/in-what-cases-we-shouldnt-use-dependency-injection

WAYS TO DO DI

-- Pass the resource into the constructor of the dependent object.
-- Pass the resources factory method into the constructor of the dependent object

Supplier<T> introduced in Java 8 is a good for representing factories. However the constructor of the dependent class
should constrain the type of T using the wildcard expression to ensure that you are getting a supplier that can provide
the resource of the desired type.

One such example would be Supplier<T extends Tile>, this factory represented as supplier would provide a resource of
type T or any of its subclass.

ADVANTAGES OF DI
-- Improves the code's reusability, testability and extensibility.
-- Modern DI frameworks such as Dagger, Guice and Spring should be used, since they automate all of the DI work
by managing the dependency graphs.
