Item 31 : USE BOUNDED WILDCARDS TO INCREASE API FLEXIBILITY

-- Parameterized type are invariant (for any 2 types T1 and T2, List<T1> and List<T2> are neither subtypes nor
    supertypes of each other).
-- Since String is a subtype of Object, it seems counterintuitive that List<String> is not a subtype of List<Object>
-- Since, List<String> cannot do everything that List<Object> can, they are not subtypes...Liskov Substitution
    Principle.

-- Stack<Number> - see ex BoundedWildcardStack.
    -- push(Integer) works
    -- would expect pushAll(Iterable<Integer>) to work as well - but doesn't since parameterized types are invariant.
    -- producer input param needs to be any subtype of the type, defined as <? extends E> : all types are subtypes of
        themselves.

    -- Object obj = pop() works
    -- would expect popAll(Collection<Object>) to work, but doesnt for the same reason as above.
    -- consumer input params needs to be any supertype of the type, defined as <? super E> : all types are subtypes of
        themselves.

    -- PECS : PRODUCER EXTENDS CONSUMER SUPER

-- DO NOT use wildcard types in return types. It forces the client code to use wildcard types as well.
    -- See BoundedSetUnion

-- If a type parameter is only used once in method declaration, replace it with wildcard. - (See Swap)
    -- If its a bounded type param, replace with bounded wildcard
    -- If its an unbounded type param, replace with unbounded wildcard.

    -- Do this specially for a public API, especially because it alleviates the burden of clients to have to deal with
        Type parameters.
        -- This causes an issue with implementation - its not possible to add a non-null value to the List<?>.
        -- Solution is to use the generic helper method to capture the type.
        -- The compiler knows that the type of elements is E, hence it can safely put the values that come out, back
            into the list of type List<E>.

-- SUMMARY
    -- Prefer wildcards in the public API to increase API flexibility.
    -- Remember Producer-Extends Consumer-Super
        -- Comparators and Comparables are always consumers.